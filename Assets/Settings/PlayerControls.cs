//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BaseMap"",
            ""id"": ""aa00332a-f4e0-4c86-ab36-f76c07f3d590"",
            ""actions"": [
                {
                    ""name"": ""Rotating"",
                    ""type"": ""Value"",
                    ""id"": ""7b62e491-a8e5-405e-b7eb-0f22692008a8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Moving"",
                    ""type"": ""Button"",
                    ""id"": ""0bef4b9d-5bb5-4c1a-bd0a-03e727f0acd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSpell"",
                    ""type"": ""Button"",
                    ""id"": ""d940490b-2f01-4f66-9f39-9a51518bdc58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextSpell"",
                    ""type"": ""Button"",
                    ""id"": ""501fa3ac-8931-493c-bf2c-9e1fd9df3427"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousSpell"",
                    ""type"": ""Button"",
                    ""id"": ""4a251c9f-068e-4b9a-b8c9-79022f2ad487"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e1a11060-6d00-4a5a-ad1d-e1c24cac9333"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotating"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""adbd0ee3-4a5c-4d89-873f-29e91164e897"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotating"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""687de10a-df81-4f38-ac5d-af4b2ef4d0f9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotating"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""51a1764c-723d-44d9-9b2e-089a736a7a52"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbbda846-b2c7-49ea-8848-4cfae1e9ab3a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f48afb23-5127-4564-a374-724932362bb6"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""744be41d-4ade-4629-829f-dc3f1a33f33b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bafc2fe1-80ab-440d-aed2-bf86aaf39ce9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e106090f-a819-47ab-8335-d750d96d9c25"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseMap
        m_BaseMap = asset.FindActionMap("BaseMap", throwIfNotFound: true);
        m_BaseMap_Rotating = m_BaseMap.FindAction("Rotating", throwIfNotFound: true);
        m_BaseMap_Moving = m_BaseMap.FindAction("Moving", throwIfNotFound: true);
        m_BaseMap_UseSpell = m_BaseMap.FindAction("UseSpell", throwIfNotFound: true);
        m_BaseMap_NextSpell = m_BaseMap.FindAction("NextSpell", throwIfNotFound: true);
        m_BaseMap_PreviousSpell = m_BaseMap.FindAction("PreviousSpell", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseMap
    private readonly InputActionMap m_BaseMap;
    private List<IBaseMapActions> m_BaseMapActionsCallbackInterfaces = new List<IBaseMapActions>();
    private readonly InputAction m_BaseMap_Rotating;
    private readonly InputAction m_BaseMap_Moving;
    private readonly InputAction m_BaseMap_UseSpell;
    private readonly InputAction m_BaseMap_NextSpell;
    private readonly InputAction m_BaseMap_PreviousSpell;
    public struct BaseMapActions
    {
        private @PlayerControls m_Wrapper;
        public BaseMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotating => m_Wrapper.m_BaseMap_Rotating;
        public InputAction @Moving => m_Wrapper.m_BaseMap_Moving;
        public InputAction @UseSpell => m_Wrapper.m_BaseMap_UseSpell;
        public InputAction @NextSpell => m_Wrapper.m_BaseMap_NextSpell;
        public InputAction @PreviousSpell => m_Wrapper.m_BaseMap_PreviousSpell;
        public InputActionMap Get() { return m_Wrapper.m_BaseMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseMapActions set) { return set.Get(); }
        public void AddCallbacks(IBaseMapActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseMapActionsCallbackInterfaces.Add(instance);
            @Rotating.started += instance.OnRotating;
            @Rotating.performed += instance.OnRotating;
            @Rotating.canceled += instance.OnRotating;
            @Moving.started += instance.OnMoving;
            @Moving.performed += instance.OnMoving;
            @Moving.canceled += instance.OnMoving;
            @UseSpell.started += instance.OnUseSpell;
            @UseSpell.performed += instance.OnUseSpell;
            @UseSpell.canceled += instance.OnUseSpell;
            @NextSpell.started += instance.OnNextSpell;
            @NextSpell.performed += instance.OnNextSpell;
            @NextSpell.canceled += instance.OnNextSpell;
            @PreviousSpell.started += instance.OnPreviousSpell;
            @PreviousSpell.performed += instance.OnPreviousSpell;
            @PreviousSpell.canceled += instance.OnPreviousSpell;
        }

        private void UnregisterCallbacks(IBaseMapActions instance)
        {
            @Rotating.started -= instance.OnRotating;
            @Rotating.performed -= instance.OnRotating;
            @Rotating.canceled -= instance.OnRotating;
            @Moving.started -= instance.OnMoving;
            @Moving.performed -= instance.OnMoving;
            @Moving.canceled -= instance.OnMoving;
            @UseSpell.started -= instance.OnUseSpell;
            @UseSpell.performed -= instance.OnUseSpell;
            @UseSpell.canceled -= instance.OnUseSpell;
            @NextSpell.started -= instance.OnNextSpell;
            @NextSpell.performed -= instance.OnNextSpell;
            @NextSpell.canceled -= instance.OnNextSpell;
            @PreviousSpell.started -= instance.OnPreviousSpell;
            @PreviousSpell.performed -= instance.OnPreviousSpell;
            @PreviousSpell.canceled -= instance.OnPreviousSpell;
        }

        public void RemoveCallbacks(IBaseMapActions instance)
        {
            if (m_Wrapper.m_BaseMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseMapActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseMapActions @BaseMap => new BaseMapActions(this);
    public interface IBaseMapActions
    {
        void OnRotating(InputAction.CallbackContext context);
        void OnMoving(InputAction.CallbackContext context);
        void OnUseSpell(InputAction.CallbackContext context);
        void OnNextSpell(InputAction.CallbackContext context);
        void OnPreviousSpell(InputAction.CallbackContext context);
    }
}
